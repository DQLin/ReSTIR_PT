# FLIP GitHub repository: https://github.com/NVlabs/flip.

# A render graph that creates a reference image and a test image
# and compares them using HDR-FLIP. The reference is an accumulation
# of 1 spp path traced images while the test is generated by
# rendering 1 spp path traced images using ReSTIR, followed
# by denoising with the NRD denoiser and DLSS.
def render_graph_HDRFLIPDemo():
    g = RenderGraph("HDRFLIPDemo")

    loadRenderPassLibrary("GBuffer.dll")
    loadRenderPassLibrary("InlinePathTracer.dll")
    loadRenderPassLibrary("AccumulatePass.dll")
    loadRenderPassLibrary("NRDPass.dll")
    loadRenderPassLibrary("ReLAX.dll")
    loadRenderPassLibrary("DLSSPass.dll")
    loadRenderPassLibrary("FLIPPass.dll")

    GBufferRT = createPass("GBufferRT", {'samplePattern': SamplePattern.Center, 'texLOD': TexLODMode.RayCones})
    g.addPass(GBufferRT, "GBufferRT")

    ######################################################################################################
    #################### Reference graph (accumulated inline path tracer results) ########################
    ######################################################################################################
    InlinePathTracerReference = createPass("InlinePathTracer", {'useScreenSpaceReSTIR': False, 'colorFormat': ColorFormat.RGBA32F})
    g.addPass(InlinePathTracerReference, "InlinePathTracerReference")
    AccumulatePass = createPass("AccumulatePass", {'enabled': True, 'precisionMode': AccumulatePrecision.Single, 'maxAccumulatedFrames': 2 ** 16})
    g.addPass(AccumulatePass, "AccumulatePass")

    g.addEdge("GBufferRT.vbuffer",                              "InlinePathTracerReference.vbuffer")
    g.addEdge("InlinePathTracerReference.color",                "AccumulatePass.input")

    ######################################################################################################
    ########## Test graph (NRD/ReLAX and DLSS on top of inline path tracer + ReSTIR results) #############
    ##########       NOTE: This graph can be replaced with your own rendering setup          #############
    ######################################################################################################
    InlinePathTracerTest = createPass("InlinePathTracer", {'samplesPerPixel': 1, 'useScreenSpaceReSTIR': True, 'colorFormat': ColorFormat.RGBA32F})
    g.addPass(InlinePathTracerTest, "InlinePathTracerTest")
    NRD = createPass("NRD")
    g.addPass(NRD, "NRD")
    ModulateIllumination = createPass("ModulateIllumination")
    g.addPass(ModulateIllumination, "ModulateIllumination")
    DLSS = createPass("DLSSPass", {'motionVectorScale': DLSSMotionVectorScale.Relative, 'isHDR': True})
    g.addPass(DLSS, "DLSS")

    g.addEdge("GBufferRT.vbuffer",                              "InlinePathTracerTest.vbuffer")

    g.addEdge("InlinePathTracerTest.relaxSpecularIllumination", "NRD.SpecularIlluminationAndHitT")
    g.addEdge("InlinePathTracerTest.relaxDiffuseIllumination",  "NRD.DiffuseIlluminationAndHitT")
    g.addEdge("GBufferRT.mvecW",                                "NRD.WorldMotionVectors")
    g.addEdge("GBufferRT.normWRoughness",                       "NRD.WorldNormalAndRoughness")
    g.addEdge("GBufferRT.linearZ",                              "NRD.LinearZ")

    g.addEdge("InlinePathTracerTest.relaxEmission",             "ModulateIllumination.Emission")
    g.addEdge("InlinePathTracerTest.relaxDiffuseReflectance",   "ModulateIllumination.DiffuseReflectance")
    g.addEdge("InlinePathTracerTest.relaxSpecularReflectance",  "ModulateIllumination.SpecularReflectance")
    g.addEdge("NRD.FilteredDiffuseIllumination",                "ModulateIllumination.DiffuseIllumination")
    g.addEdge("NRD.FilteredSpecularIllumination",               "ModulateIllumination.SpecularIllumination")

    g.addEdge("GBufferRT.mvec",                                 "DLSS.mvec")
    g.addEdge("GBufferRT.linearZ",                              "DLSS.depth")
    g.addEdge("ModulateIllumination.Output",                    "DLSS.color")

    ######################################################################################################
    ################ Plug reference and test streams into FLIP pass (invoking HDR-FLIP) ##################
    ######################################################################################################
    FLIPPass = createPass('FLIPPass', {'enabled': True, 'isHDR': True, 'toneMapper': FLIPToneMapperType.ACES, 'useCustomExposureParameters': False, 'startExposure': 0.0, 'stopExposure': 0.0, 'numExposures': 2, 'useMagma': True, 'monitorWidthPixels': 3840, 'monitorWidthMeters': 0.7, 'monitorDistanceMeters': 0.7, 'calculatePerFrameFLIP': False, 'useRealMonitorInfo': False})
    g.addPass(FLIPPass, 'FLIPPass')
    g.addEdge('DLSS.output', 'FLIPPass.testImage')
    g.addEdge('AccumulatePass.output', 'FLIPPass.referenceImage')

    g.markOutput('FLIPPass.errorMapDisplay')
    g.markOutput("DLSS.output")
    g.markOutput("AccumulatePass.output")
    g.markOutput("InlinePathTracerTest.color")
    return g

m.loadScene('TestScenes/MaterialTest.pyscene')

HDRFLIPDemo = render_graph_HDRFLIPDemo()
try: m.addGraph(HDRFLIPDemo)
except NameError: None
